server {
    if ($host = mail.domain.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


        listen 80;
        listen [::]:80;
        server_name mail.domain.com;
    # Redirect http to https
        return 301 https://$server_name$request_uri;


}

# HTTPS
server {
  listen 443 ssl http2;
  listen [::]:443 ssl http2;
  server_name mail.domain.com;
  server_tokens off;
  client_max_body_size 8m;
  # logging
  access_log /var/log/nginx/mail.domain.com.access.log;
  error_log /var/log/nginx/mail.domain.com.error.log;

  # ssl related
#  ssl on;
    ssl_certificate /etc/letsencrypt/live/mail.domain.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/mail.domain.com/privkey.pem; # managed by Certbot
  #ssl_trusted_certificate /etc/letsencrypt/live/inventory.domain.com/chain.pem;

  ssl_session_timeout 1d;
  ssl_session_cache shared:MozSSL:10m;
  ssl_session_tickets off;
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
  ssl_prefer_server_ciphers off;
  ssl_stapling on;
  ssl_stapling_verify on;


# Proxy pass related
  location / {

    # Where to pass
    proxy_pass https://localhost:8443;
    #proxy_pass http://127.0.0.1:8080/sso/login;
    # proxy_pass http://127.0.0.1:8080/admin;


    #including whitelist for internal ip addresses
    include /etc/nginx/whitelist.conf;

    # httpV1.1 to Websocket
    #proxy_set_header Upgrade $http_upgrade;
    #      proxy_set_header Connection "upgrade";

    # Websocket closing prevention
    proxy_read_timeout 86400;

    # More info for proxied server about client
    #proxy_set_header Host              $http_host;
    #proxy_set_header X-Real-IP         $remote_addr;
    #proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    #proxy_set_header X-Forwarded-Proto $scheme;
    # headers for Kuma web UI
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection upgrade;
 
    }

# location ^~ /admin/ {
#     # enable the next two lines for http auth
#     #auth_basic "Restricted";
#     #auth_basic_user_file /config/nginx/.htpasswd;

#     # enable for ldap auth (requires ldap-server.conf in the server block)
#     #include /config/nginx/ldap-location.conf;

#     # enable for Authelia (requires authelia-server.conf in the server block)
#     #include /config/nginx/authelia-location.conf;

#     # enable for Authentik (requires authentik-server.conf in the server block)
#     #include /config/nginx/authentik-location.conf;

#     # include /config/nginx/proxy.conf;
#     # include /config/nginx/resolver.conf;
#     set $upstream_app localhost;
#     set $upstream_port 8085;
#     set $upstream_proto http;
#     proxy_pass $upstream_proto://$upstream_app:$upstream_port;

# }

# location /webmail {
#     return 301 $scheme://$host/webmail/;
# }

# location ^~ /webmail/ {
#     # enable the next two lines for http auth
#     #auth_basic "Restricted";
#     #auth_basic_user_file /config/nginx/.htpasswd;

#     # enable for ldap auth (requires ldap-server.conf in the server block)
#     #include /config/nginx/ldap-location.conf;

#     # enable for Authelia (requires authelia-server.conf in the server block)
#     #include /config/nginx/authelia-location.conf;

#     # enable for Authentik (requires authentik-server.conf in the server block)
#     #include /config/nginx/authentik-location.conf;

#     # include /config/nginx/proxy.conf;
#     # include /config/nginx/resolver.conf;
#     set $upstream_app localhost;
#     set $upstream_port 8080;
#     set $upstream_proto http;
#     proxy_pass $upstream_proto://$upstream_app:$upstream_port;

# }

}
